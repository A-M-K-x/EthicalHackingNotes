name: Update Fork Users List

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
  schedule:
    # Run every Friday at 1:30 AM IST (which is 20:00 UTC the previous day)
    - cron: '0 20 * * 4'
    # Run every Tuesday at 1:30 AM IST (which is 20:00 UTC the previous day)
    - cron: '0 20 * * 1'

jobs:
  update-fork-list:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch Fork Users and Update CSV
        id: generate
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Get current timestamp in IST
            const now = new Date();
            const istOffset = 5.5 * 60 * 60 * 1000; // IST is UTC+5:30
            const istTime = new Date(now.getTime() + istOffset);
            const lastUpdate = istTime.toISOString().replace('T', ' ').substring(0, 19) + ' IST';

            console.log('Fetching forks...');
            const allForks = await github.paginate(
              github.rest.repos.listForks,
              { owner, repo, per_page: 100 }
            );

            console.log(`Found ${allForks.length} forks`);

            // Sort forks by creation date (oldest first)
            allForks.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));

            const csvRows = ['Profile Name,Username,Repo Count,EthicalHackingNotes-Christ Check,Last Update'];
            const mdRows = ['| Profile Name | Username | Repo Count | EthicalHackingNotes-Christ Check | Last Update |', '|---|---|---|---|---|'];

            for (const fork of allForks) {
              try {
                console.log(`Processing fork: ${fork.owner.login}`);
                
                // Get user's public repositories
                const userRepos = await github.paginate(
                  github.rest.repos.listForUser,
                  { username: fork.owner.login, per_page: 100, type: 'public' }
                );

                const repoCount = userRepos.length;
                
                // Check if user has EthicalHackingNotes-Christ repo
                const hasEthicalHackingRepo = userRepos.some(repo => 
                  repo.name === 'EthicalHackingNotes-Christ'
                );

                // Get user's last activity (last push to any repo)
                const lastActivity = userRepos.length > 0 ? 
                  userRepos.reduce((latest, repo) => {
                    const repoUpdate = new Date(repo.updated_at);
                    return repoUpdate > latest ? repoUpdate : latest;
                  }, new Date(0)) : new Date(0);
                
                const userLastUpdate = lastActivity.getTime() > 0 ? 
                  new Date(lastActivity.getTime() + istOffset).toISOString().replace('T', ' ').substring(0, 19) + ' IST' : 
                  'No activity';

                const profileName = fork.owner.name || fork.owner.login;
                const username = fork.owner.login;
                const usernameWithLink = `https://github.com/${username}`;
                const ethicalHackingCheck = hasEthicalHackingRepo ? '✓' : '✗';

                csvRows.push(`"${profileName}","${usernameWithLink}",${repoCount},"${ethicalHackingCheck}","${userLastUpdate}"`);
                mdRows.push(`| ${profileName} | [${username}](${usernameWithLink}) | ${repoCount} | ${ethicalHackingCheck} | ${userLastUpdate} |`);
                
                // Add a small delay to avoid hitting rate limits
                await new Promise(resolve => setTimeout(resolve, 100));
                
              } catch (error) {
                console.error(`Error processing ${fork.owner.login}:`, error);
                // Add entry with error indicator
                const profileName = fork.owner.name || fork.owner.login;
                const username = fork.owner.login;
                const usernameWithLink = `https://github.com/${username}`;
                csvRows.push(`"${profileName}","${usernameWithLink}","Error","Error","Error"`);
                mdRows.push(`| ${profileName} | [${username}](${usernameWithLink}) | Error | Error | Error |`);
              }
            }

            const csvContent = csvRows.join('\n');
            const mdContent = mdRows.join('\n');
            
            // Ensure .repo directory exists
            if (!fs.existsSync('.repo')) {
              fs.mkdirSync('.repo', { recursive: true });
            }
            
            fs.writeFileSync('.repo/fork-users.csv', csvContent);
            fs.writeFileSync('.repo/fork-users.md', mdContent);

            // Also create a summary markdown file
            const summaryContent = [
              '# Fork Users Summary',
              '',
              `**Total Forks:** ${allForks.length}`,
              `**Report Generated:** ${lastUpdate}`,
              '',
              '## Data Files',
              '- **CSV Format**: `.repo/fork-users.csv` - Machine readable format',
              '- **Markdown Format**: `.repo/fork-users.md` - Human readable table format',
              '',
              '## Data Structure',
              '- **Profile Name**: User\'s display name or username',
              '- **Username**: GitHub profile link (clickable in markdown)',
              '- **Repo Count**: Number of public repositories',
              '- **EthicalHackingNotes-Christ Check**: ✓ if repo exists, ✗ if not',
              '- **Last Update**: Individual user\'s last activity across all repositories',
              '',
              '## Sorting',
              'Users are sorted by fork creation date (first fork to latest fork)',
              '',
              '## Notes',
              '- Users are sorted chronologically by when they forked the repository',
              '- Last Update tracks each user\'s most recent activity, not the report generation time',
              '- EthicalHackingNotes-Christ repo check helps identify users who have the specific repository'
            ].join('\n');

            fs.writeFileSync('.repo/README.md', summaryContent);

      - name: Check for changes in .repo directory
        id: check_changes
        run: |
          git add .repo/
          if git diff --staged --quiet; then
            echo "No changes detected"
          else
            echo "changes_detected=true" >> $GITHUB_ENV
          fi

      - name: Commit and Push Changes if Fork List Updated
        if: env.changes_detected == 'true'
        run: |
          git config user.name "GitHub Action Bot"
          git config user.email "action@github.com"
          git add .repo/
          git commit -m "Update fork users data - $(date '+%Y-%m-%d %H:%M:%S IST')"
          git push
